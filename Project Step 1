{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Project Step 1","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"o_jkgTHXx-fG","colab_type":"code","colab":{}},"source":["#imports\n","import tensorflow\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from __future__ import absolute_import\n","from __future__ import division\n","from __future__ import print_function\n","from sklearn.decomposition import PCA\n","import gzip\n","import numpy\n","from six.moves import xrange  # pylint: disable=redefined-builtin\n","\n","from tensorflow.contrib.learn.python.learn.datasets import base\n","from tensorflow.python.framework import dtypes\n","\n","# download mnist training data\n","from tensorflow.examples.tutorials.mnist import input_data"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"38DyjYOOU2cd","colab_type":"code","colab":{}},"source":["#########for emnist-letters########\n","# from https://github.com/tensorflow/tensorflow/blob/7c36309c37b04843030664cdc64aca2bb7d6ecaa/tensorflow/contrib/learn/python/learn/datasets/mnist.py#L160\n","# modified for 26 classes\n","def _read32(bytestream):\n","  dt = numpy.dtype(numpy.uint32).newbyteorder('>')\n","  return numpy.frombuffer(bytestream.read(4), dtype=dt)[0]\n","\n","\n","def extract_images(f):\n","  \"\"\"Extract the images into a 4D uint8 numpy array [index, y, x, depth].\n","  Args:\n","    f: A file object that can be passed into a gzip reader.\n","  Returns:\n","    data: A 4D uint8 numpy array [index, y, x, depth].\n","  Raises:\n","    ValueError: If the bytestream does not start with 2051.\n","  \"\"\"\n","  print('Extracting', f.name)\n","  with gzip.GzipFile(fileobj=f) as bytestream:\n","    magic = _read32(bytestream)\n","    if magic != 2051:\n","      raise ValueError('Invalid magic number %d in MNIST image file: %s' %\n","                       (magic, f.name))\n","    num_images = _read32(bytestream)\n","    rows = _read32(bytestream)\n","    cols = _read32(bytestream)\n","    buf = bytestream.read(rows * cols * num_images)\n","    data = numpy.frombuffer(buf, dtype=numpy.uint8)\n","    data = data.reshape(num_images, rows, cols, 1)\n","    return data\n","\n","\n","def dense_to_one_hot(labels_dense, num_classes):\n","  labels_dense = labels_dense - 1 #ADDED THIS BC INDEX STARTS AT 1\n","  \"\"\"Convert class labels from scalars to one-hot vectors.\"\"\"\n","  num_labels = labels_dense.shape[0]\n","  index_offset = numpy.arange(num_labels) * num_classes\n","  labels_one_hot = numpy.zeros((num_labels, num_classes))\n","  labels_one_hot.flat[index_offset + labels_dense.ravel()] = 1\n","  return labels_one_hot\n","\n","\n","def extract_labels(f, one_hot=False, num_classes=26):\n","  \"\"\"Extract the labels into a 1D uint8 numpy array [index].\n","  Args:\n","    f: A file object that can be passed into a gzip reader.\n","    one_hot: Does one hot encoding for the result.\n","    num_classes: Number of classes for the one hot encoding.\n","  Returns:\n","    labels: a 1D uint8 numpy array.\n","  Raises:\n","    ValueError: If the bystream doesn't start with 2049.\n","  \"\"\"\n","  print('Extracting', f.name)\n","  with gzip.GzipFile(fileobj=f) as bytestream:\n","    magic = _read32(bytestream)\n","    if magic != 2049:\n","      raise ValueError('Invalid magic number %d in MNIST label file: %s' %\n","                       (magic, f.name))\n","    num_items = _read32(bytestream)\n","    buf = bytestream.read(num_items)\n","    labels = numpy.frombuffer(buf, dtype=numpy.uint8)\n","    if one_hot:\n","      return dense_to_one_hot(labels, num_classes)\n","    return labels\n","\n","\n","class DataSet(object):\n","\n","  def __init__(self,\n","               images,\n","               labels,\n","               fake_data=False,\n","               one_hot=False,\n","               dtype=dtypes.float32,\n","               reshape=True):\n","    \"\"\"Construct a DataSet.\n","    one_hot arg is used only if fake_data is true.  `dtype` can be either\n","    `uint8` to leave the input as `[0, 255]`, or `float32` to rescale into\n","    `[0, 1]`.\n","    \"\"\"\n","    dtype = dtypes.as_dtype(dtype).base_dtype\n","    if dtype not in (dtypes.uint8, dtypes.float32):\n","      raise TypeError('Invalid image dtype %r, expected uint8 or float32' %\n","                      dtype)\n","    if fake_data:\n","      self._num_examples = 10000\n","      self.one_hot = one_hot\n","    else:\n","      assert images.shape[0] == labels.shape[0], (\n","          'images.shape: %s labels.shape: %s' % (images.shape, labels.shape))\n","      self._num_examples = images.shape[0]\n","\n","      # Convert shape from [num examples, rows, columns, depth]\n","      # to [num examples, rows*columns] (assuming depth == 1)\n","      if reshape:\n","        assert images.shape[3] == 1\n","        images = images.reshape(images.shape[0],\n","                                images.shape[1] * images.shape[2])\n","      if dtype == dtypes.float32:\n","        # Convert from [0, 255] -> [0.0, 1.0].\n","        images = images.astype(numpy.float32)\n","        images = numpy.multiply(images, 1.0 / 255.0)\n","    self._images = images\n","    self._labels = labels\n","    self._epochs_completed = 0\n","    self._index_in_epoch = 0\n","\n","  @property\n","  def images(self):\n","    return self._images\n","\n","  @property\n","  def labels(self):\n","    return self._labels\n","\n","  @property\n","  def num_examples(self):\n","    return self._num_examples\n","\n","  @property\n","  def epochs_completed(self):\n","    return self._epochs_completed\n","\n","  def next_batch(self, batch_size, fake_data=False):\n","    \"\"\"Return the next `batch_size` examples from this data set.\"\"\"\n","    if fake_data:\n","      fake_image = [1] * 784\n","      if self.one_hot:\n","        fake_label = [1] + [0] * 9\n","      else:\n","        fake_label = 0\n","      return [fake_image for _ in xrange(batch_size)], [\n","          fake_label for _ in xrange(batch_size)\n","      ]\n","    start = self._index_in_epoch\n","    self._index_in_epoch += batch_size\n","    if self._index_in_epoch > self._num_examples:\n","      # Finished epoch\n","      self._epochs_completed += 1\n","      # Shuffle the data\n","      perm = numpy.arange(self._num_examples)\n","      numpy.random.shuffle(perm)\n","      self._images = self._images[perm]\n","      self._labels = self._labels[perm]\n","      # Start next epoch\n","      start = 0\n","      self._index_in_epoch = batch_size\n","      assert batch_size <= self._num_examples\n","    end = self._index_in_epoch\n","    return self._images[start:end], self._labels[start:end]\n","\n","\n","def read_data_sets(train_dir,\n","                   fake_data=False,\n","                   one_hot=False,\n","                   dtype=dtypes.float32,\n","                   reshape=True,\n","                   validation_size=5000):\n","  if fake_data:\n","\n","    def fake():\n","      return DataSet([], [], fake_data=True, one_hot=one_hot, dtype=dtype)\n","\n","    train = fake()\n","    validation = fake()\n","    test = fake()\n","    return base.Datasets(train=train, validation=validation, test=test)\n","\n","  TRAIN_IMAGES = 'emnist-letters-train-images-idx3-ubyte.gz'\n","  TRAIN_LABELS = 'emnist-letters-train-labels-idx1-ubyte.gz'\n","  TEST_IMAGES = 'emnist-letters-test-images-idx3-ubyte.gz'\n","  TEST_LABELS = 'emnist-letters-test-labels-idx1-ubyte.gz'\n","\n","  local_file = TRAIN_IMAGES #base.maybe_download(TRAIN_IMAGES, train_dir,\n","                                   #SOURCE_URL + TRAIN_IMAGES)\n","  with open(local_file, 'rb') as f:\n","    train_images = extract_images(f)\n","\n","  local_file = TRAIN_LABELS #base.maybe_download(TRAIN_LABELS, train_dir,\n","                                   #SOURCE_URL + TRAIN_LABELS)\n","  with open(local_file, 'rb') as f:\n","    train_labels = extract_labels(f, one_hot=one_hot)\n","\n","  local_file = TEST_IMAGES #base.maybe_download(TEST_IMAGES, train_dir,\n","                                  # SOURCE_URL + TEST_IMAGES)\n","  with open(local_file, 'rb') as f:\n","    test_images = extract_images(f)\n","\n","  local_file = TEST_LABELS #base.maybe_download(TEST_LABELS, train_dir,\n","                                   #SOURCE_URL + TEST_LABELS)\n","  with open(local_file, 'rb') as f:\n","    test_labels = extract_labels(f, one_hot=one_hot)\n","\n","  if not 0 <= validation_size <= len(train_images):\n","    raise ValueError(\n","        'Validation size should be between 0 and {}. Received: {}.'\n","        .format(len(train_images), validation_size))\n","\n","  validation_images = train_images[:validation_size]\n","  validation_labels = train_labels[:validation_size]\n","  train_images = train_images[validation_size:]\n","  train_labels = train_labels[validation_size:]\n","\n","  train = DataSet(train_images, train_labels, dtype=dtype, reshape=reshape)\n","  validation = DataSet(validation_images,\n","                       validation_labels,\n","                       dtype=dtype,\n","                       reshape=reshape)\n","  test = DataSet(test_images, test_labels, dtype=dtype, reshape=reshape)\n","\n","  return base.Datasets(train=train, validation=validation, test=test)\n","\n","\n","def load_mnist(train_dir='MNIST-data'):\n","  return read_data_sets(train_dir)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"m2jRUMqmMG2n","colab_type":"code","colab":{}},"source":["def train(dataset,features,hidden,epoch,batch_size,rate,reduce=0):\n","  total_test_size = len(dataset.test.images)\n","  print((total_test_size))\n","  if reduce != 0:\n","    total_test_size//reduce\n","  eta = tf.constant(rate) #learning rate\n","  \n","  a_0 = tf.placeholder(tf.float32, [None, 784])\n","  y = tf.placeholder(tf.float32, [None, features])\n","\n","  w_1 = tf.Variable(tf.truncated_normal([784, hidden]))\n","  b_1 = tf.Variable(tf.truncated_normal([1, hidden]))\n","  w_2 = tf.Variable(tf.truncated_normal([hidden, features]))\n","  b_2 = tf.Variable(tf.truncated_normal([1, features]))\n","  #error = tf.Variable(tf.truncated_normal([hidden, features]))\n","  \n","  #forward pass\n","  z_1 = tf.add(tf.matmul(a_0, w_1), b_1)\n","  a_1 = sigma(z_1)\n","  z_2 = tf.add(tf.matmul(a_1, w_2), b_2)\n","  a_2 = sigma(z_2)\n","  \n","  diff = tf.subtract(a_2, y)\n","  \n","  #backwards pass\n","  d_z_2 = tf.multiply(diff, sigmaprime(z_2))\n","  d_b_2 = d_z_2\n","  d_w_2 = tf.matmul(tf.transpose(a_1), d_z_2)\n","\n","\n","  d_a_1 = tf.matmul(d_z_2, tf.transpose(w_2))\n","  d_z_1 = tf.multiply(d_a_1, sigmaprime(z_1))\n","  d_b_1 = d_z_1\n","  d_w_1 = tf.matmul(tf.transpose(a_0), d_z_1)\n","\n","  \n","  \n","  step = [\n","      tf.assign(w_1,\n","              tf.subtract(w_1, tf.multiply(eta, d_w_1)))\n","    , tf.assign(b_1,\n","              tf.subtract(b_1, tf.multiply(eta,\n","                                 tf.reduce_mean(d_b_1, axis=[0]))))\n","    , tf.assign(w_2,\n","              tf.subtract(w_2, tf.multiply(eta, d_w_2)))\n","    , tf.assign(b_2,\n","              tf.subtract(b_2, tf.multiply(eta,\n","                                 tf.reduce_mean(d_b_2, axis=[0]))))\n","    #, tf.assign(error, diff)\n","  ]\n","  \n","  \n","  # loss functions \n","  acct_mat = tf.equal(tf.argmax(a_2, 1), tf.argmax(y, 1))\n","  acct_res = tf.reduce_sum(tf.cast(acct_mat, tf.float32))\n","  \n","  #accuracy arrays\n","  test_accuracy = []\n","  train_accuracy = []\n","  \n","  #start session\n","  sess = tf.InteractiveSession()\n","  sess.run(tf.global_variables_initializer())\n","  ### train the model\n","  for _ in epoch:\n","    for i in range(total_test_size//batch_size):\n","        batch_xs, batch_ys = dataset.train.next_batch(batch_size)\n","        sess.run(step, feed_dict = {a_0: batch_xs,\n","                                    y : batch_ys})\n","  ### test the accuracy \n","  test_acc = sess.run(acct_res, feed_dict =\n","                          {a_0: dataset.test.images[:1000],\n","                           y : dataset.test.labels[:1000]})/1000\n","  train_acc = sess.run(acct_res, feed_dict =\n","                          {a_0: dataset.train.images[:1000],\n","                           y : dataset.train.labels[:1000]})/1000\n","  test_accuracy.append(test_acc)\n","  train_accuracy.append(train_acc)\n","  return test_accuracy,train_accuracy\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OjqW7EEJdW5j","colab_type":"code","colab":{}},"source":["def sigma(x):\n","    return tf.div(tf.constant(1.0),\n","                  tf.add(tf.constant(1.0), tf.exp(tf.negative(x))))\n","  \n","def sigmaprime(x):\n","    return tf.multiply(sigma(x), tf.subtract(tf.constant(1.0), sigma(x)))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BjIuBh_DdoUp","colab_type":"code","colab":{}},"source":["#initialize some variables\n","features_m = 10\n","features_e = 26\n","hidden = 30\n","batch_size = 30\n","rate = 0.5\n","epoch = range(5)\n","m_test_accuracy = []\n","m_train_accuracy = []\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HJzmLk4_jDvl","colab_type":"code","outputId":"3401da41-ed04-4cd2-c8af-81c569c48a7f","executionInfo":{"status":"ok","timestamp":1554309774583,"user_tz":240,"elapsed":2117,"user":{"displayName":"Andrej Kukuruzovic","photoUrl":"","userId":"02045858448246889126"}},"colab":{"base_uri":"https://localhost:8080/","height":258}},"source":["#load data\n","mnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n","emnist = read_data_sets('', one_hot=True) "],"execution_count":0,"outputs":[{"output_type":"stream","text":["Extracting MNIST_data/train-images-idx3-ubyte.gz\n","Extracting MNIST_data/train-labels-idx1-ubyte.gz\n","Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\n","Extracting MNIST_data/t10k-images-idx3-ubyte.gz\n","Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\n","Extracting MNIST_data/t10k-labels-idx1-ubyte.gz\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:290: DataSet.__init__ (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","Extracting emnist-letters-train-images-idx3-ubyte.gz\n","Extracting emnist-letters-train-labels-idx1-ubyte.gz\n","Extracting emnist-letters-test-images-idx3-ubyte.gz\n","Extracting emnist-letters-test-labels-idx1-ubyte.gz\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wZqR1FV2eJ7w","colab_type":"code","outputId":"ad48a838-2b83-4420-eb6c-a278ad4d65a2","executionInfo":{"status":"ok","timestamp":1554309784531,"user_tz":240,"elapsed":5923,"user":{"displayName":"Andrej Kukuruzovic","photoUrl":"","userId":"02045858448246889126"}},"colab":{"base_uri":"https://localhost:8080/","height":156}},"source":["#train and test the model\n","m_test_accuracy,m_train_accuracy = train(mnist,features_m,hidden,epoch,batch_size,rate)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["10000\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Colocations handled automatically by placer.\n","WARNING:tensorflow:From <ipython-input-4-1fbf98d1f32b>:3: div (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Deprecated in favor of operator or tf.math.divide.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LofqoTGbivEi","colab_type":"code","outputId":"a3ba5f6f-3cf7-4309-bcc6-76640e40a313","executionInfo":{"status":"ok","timestamp":1554309868828,"user_tz":240,"elapsed":329,"user":{"displayName":"Andrej Kukuruzovic","photoUrl":"","userId":"02045858448246889126"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["m_test_accuracy"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.906]"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"J9X1zcQHiJu0","colab_type":"code","outputId":"882adb55-4f96-499e-a69e-0c964cb24d46","executionInfo":{"status":"error","timestamp":1554267150757,"user_tz":240,"elapsed":878,"user":{"displayName":"Andrej Kukuruzovic","photoUrl":"","userId":"02045858448246889126"}},"colab":{"base_uri":"https://localhost:8080/","height":1290}},"source":["plt.figure()\n","plt.title('MNIST Initial Network')\n","plt.plot(epoch,m_test_accuracy,color='red',label='test')\n","plt.plot(epoch,m_train_accuracy,color='blue', label='train')\n","plt.xlabel('epoch')\n","plt.ylabel('classification error')\n","plt.legend()"],"execution_count":0,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-1c9b2be7816f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'MNIST Initial Network'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mm_test_accuracy\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'red'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'test'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mepoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mm_train_accuracy\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'blue'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'train'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'epoch'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(scalex, scaley, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2809\u001b[0m     return gca().plot(\n\u001b[1;32m   2810\u001b[0m         *args, scalex=scalex, scaley=scaley, **({\"data\": data} if data\n\u001b[0;32m-> 2811\u001b[0;31m         is not None else {}), **kwargs)\n\u001b[0m\u001b[1;32m   2812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2813\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1808\u001b[0m                         \u001b[0;34m\"the Matplotlib list!)\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlabel_namer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1809\u001b[0m                         RuntimeWarning, stacklevel=2)\n\u001b[0;32m-> 1810\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1811\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1812\u001b[0m         inner.__doc__ = _add_data_doc(inner.__doc__,\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mplot\u001b[0;34m(self, scalex, scaley, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1609\u001b[0m         \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalize_kwargs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLine2D\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_alias_map\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1610\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1611\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1612\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_line\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1613\u001b[0m             \u001b[0mlines\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_grab_next_args\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    391\u001b[0m                 \u001b[0mthis\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    392\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 393\u001b[0;31m             \u001b[0;32myield\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_plot_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mthis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_plot_args\u001b[0;34m(self, tup, kwargs)\u001b[0m\n\u001b[1;32m    368\u001b[0m             \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindex_of\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtup\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    369\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 370\u001b[0;31m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_xy_from_xy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    371\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    372\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommand\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'plot'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_xy_from_xy\u001b[0;34m(self, x, y)\u001b[0m\n\u001b[1;32m    229\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    230\u001b[0m             raise ValueError(\"x and y must have same first dimension, but \"\n\u001b[0;32m--> 231\u001b[0;31m                              \"have shapes {} and {}\".format(x.shape, y.shape))\n\u001b[0m\u001b[1;32m    232\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    233\u001b[0m             raise ValueError(\"x and y can be no greater than 2-D, but have \"\n","\u001b[0;31mValueError\u001b[0m: x and y must have same first dimension, but have shapes (100,) and (0,)"]},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAegAAAFZCAYAAABTxrzcAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAGeBJREFUeJzt3XtM1ff9x/HXAbxkhRFYz6kimDoT\n3XqcDuulFipKQaDT1EwnGG+rpsbEltV2bZS24qxQummXTDtnXOPqJWrn0F1qYdVq5hRUnMWC6USW\noqiFgyjzFHWi398fbifyg3JA+z18kOcjaeI533N5827Nk/M9cOqwLMsSAAAwSlBnDwAAAFoi0AAA\nGIhAAwBgIAINAICBCDQAAAYi0AAAGIhAA5IGDx6szMzMFte/+uqrGjx4cLPbZWVlNbvN4cOHNWvW\nLElSdXW1HnnkEd+xM2fOaMGCBUpJSVFKSoomT56sPXv2SJKys7OVmpqq1NRUud1ujR8/3nfZ6/U2\ne47//7hf5aOPPtKSJUskSf/617909OjRFtf728MXX3zR4vpZs2YpLS1NTU1NLW7vT11dnfbu3ev3\ndncjMTFRJSUltjw20NlCOnsAwBT//Oc/5fV6FRoaKkn6z3/+o08//bTF7Y4ePaqTJ0+2K5g//elP\n9fTTT+s3v/mNJKm0tFRz5szRhx9+qJ/97Ge+2yUmJurnP/+5RowYcU9fQ3JyspKTkyVJe/bsUVNT\nk0aOHNns+rt1/fp1bdmyRXPmzOnQ/Q4fPqxDhw7pySefvKfnB7obXkED/zV69Gh99NFHvst///vf\n9b3vfa/F7V588UXl5ua26zFPnTqlYcOG+S4PGzZMhYWF6tOnzz3NOnjwYO3atUuTJ09WfHy8fve7\n30mS8vPz9eMf/1gff/yx1q1bp40bNyovL893vXT7Fe28efOUmpqqxMREbdiwoV3PmZmZqd/+9re6\ndOlSq8f37NmjSZMm6cknn9TcuXNVX1+v8vJyLV++XIWFhVq0aJESEhJUVVUlSdq9e7eGDBmiq1ev\nSpI2bNigFStW6Pr161q6dKlSUlKUlpamvLw83bx5U9Ltb2TWrFmjlJQUnT9/vtnz//73v9ePfvQj\nXbt2raPrBIxEoIH/SktL01/+8hff5Q8++ECpqamt3s6yLBUUFPh9zLFjxyozM1MbN25UZWWlJOmh\nhx6Sw+G453lPnz6tXbt26de//rXefvttX8Sk2yFLTk7W7NmztXjx4mb3W7t2raKjo1VQUKD33ntP\nq1at0oULF/w+X9++fTVlyhStXr26xbGzZ8/qlVde0apVq7R3716NHj1ay5Ytk9vt1syZM5WSkqJf\n/vKXGj16tI4fPy7p9pkIt9utEydOSJJKSkr02GOP6b333tMXX3yhDz74QDt37lRJSUmzfy81NTUq\nLCxUVFSU77qSkhKtX79ea9euVe/evTu2SMBQBBr4r1GjRqmiokIXL17U1atXdfz4cY0ZM6bV22Zl\nZWnlypW6fv16m4/5i1/8QjNmzNCf//xnTZw4UYmJidq6devXMu/TTz8tSXK73bp+/bouXrzYrvu9\n9tprev311yVJMTExcjqdqq6ubtd958+fr3379qmioqLZ9X/72980atQoDRo0SJKUkZGhjz/+uNk3\nDdLtsxSffPKJpNun+6dOnap//OMfvsujR4/W/v37NW3aNIWEhKh3796aNGmSDh486HuMcePGNXvM\nCxcuaMmSJVq9erUefPDBdn0dQFfAe9DAfwUHB2vChAn68MMPFRkZqfj4eIWEtP5XxO12a+TIkdqw\nYYNiY2O/8jF79eqlefPmad68efr3v/+tgoIC5ebmKjo6Wk888cQ9zRsWFuabW5Ju3brVrvt9+umn\nvlfNQUFB8ng87b7vN77xDWVmZiovL0/vvvuu7/orV66opKSk2RmH0NBQXb58udn9R48erU2bNqmh\noUE9evTQY489puXLl6uyslJ9+/ZVWFiY6uvrFR4e7rtPeHh4s28+7jwmSbm5uQoKCtK3vvWtdn0N\nQFfBK2jgDk899ZQKCwtVUFCgp556qs3bLlq0SJs3b5bH42n1eH19fbNXft/85jc1bdo0PfHEEzp1\n6tTXOndHvPzyy0pJSfF9nRERER26/+TJk3X58mXt27fPd53L5dLjjz+ugoIC3z/FxcUtohkdHa3G\nxkYdOHBA3//+9xUTE6Pq6modO3bMd7biwQcfbBb2y5cvt/nK+OWXX9YPf/hDLV26tENfB2A6Ag3c\nITY2VrW1taqoqNCoUaPavK3L5dKMGTNafU9Wkq5du6bMzEwdOHDAd11VVZVKS0vv+ae12yMkJERX\nrlxpcf3Fixc1ZMgQORwO7dy5U1evXlVjY2O7H9fhcCgrK0t5eXm+6+Lj41VSUqKzZ89Kkk6cOKEV\n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\nKCcnp9nxFStWaPXq1dq6dasOHjyo06dP2zYsAADdhd9AFxUVKSkpSZI0cOBANTQ0yOv1SpLOnj2r\n8PBw9e3bV0FBQUpISFBRUZG9EwMA0A34DXRdXZ0iIiJ8lyMjI+XxeCRJHo9HkZGRrR4DAAB3L6Sj\nd7As656f1OkMu+fHQNvYcWCwZ/uxY/uxYzP5fQXtcrlUV1fnu1xbWyun09nqsZqaGrlcLhvGBACg\ne/Eb6Li4OBUWFkqSysvL5XK5FBoaKkmKjo6W1+tVdXW1mpqatG/fPsXFxdk7MQAA3YDDasc565Ur\nV6qkpEQOh0PZ2dk6efKkwsLClJycrKNHj2rlypWSpAkTJmjevHm2Dw0AwP2uXYEGAACBxSeJAQBg\nIAINAICBbA00HxFqv7Z2XFxcrGnTpikjI0NLlizRrVu3OmnKrq2tHf/PqlWrNGvWrABPdv9oa8cX\nLlzQ9OnTNXXqVC1durSTJrw/tLXnLVu2KD09XdOnT2/xiZFov1OnTikpKUmbN29ucazD3bNscvjw\nYWv+/PmWZVnW6dOnrWnTpjU7npaWZp0/f966efOmNX36dKuiosKuUe5b/nacnJxsXbhwwbIsy3r+\n+eet/fv3B3zGrs7fji3LsioqKqz09HRr5syZgR7vvuBvx5mZmdZf//pXy7Isa9myZda5c+cCPuP9\noK09X7lyxRo/frx148YNy7Is65lnnrGOHz/eKXN2ZV9++aU1c+ZM67XXXrM2bdrU4nhHu2fbK2g+\nItR+be1YkvLz89WnTx9Jtz/l7dKlS50yZ1fmb8eSlJeXp0WLFnXGePeFtnZ869YtHTt2TImJiZKk\n7OxsRUVFddqsXVlbe+7Ro4d69OihxsZGNTU16erVqwoPD+/Mcbuknj17av369a1+HsjddM+2QPMR\nofZra8eSfL+vXltbq4MHDyohISHgM3Z1/nacn5+vUaNGqV+/fp0x3n2hrR3X19frgQce0Jtvvqnp\n06dr1apVnTVml9fWnnv16qWFCxcqKSlJ48eP17BhwzRgwIDOGrXLCgkJUe/evVs9djfdC9gPiVn8\nNpftWtvxxYsXtWDBAmVnZzf7y4m7c+eOL1++rPz8fD3zzDOdONH9584dW5almpoazZ49W5s3b9bJ\nkye1f//+zhvuPnLnnr1er9atW6eCggLt3btXpaWl+uyzzzpxOkg2BpqPCLVfWzuWbv+le/bZZ/XC\nCy8oPj6+M0bs8tracXFxserr6zVjxgw999xzKi8vV25ubmeN2mW1teOIiAhFRUWpf//+Cg4O1pgx\nY1RRUdFZo3Zpbe25srJSMTExioyMVM+ePTVixAiVlZV11qj3pbvpnm2B5iNC7dfWjqXb743OmTNH\nY8eO7awRu7y2dpyamqrdu3fr/fff15o1a+R2u5WVldWZ43ZJbe04JCREMTEx+vzzz33HOfV6d9ra\nc79+/VRZWalr165JksrKyvTwww931qj3pbvpnq2fJMZHhNrvq3YcHx+vkSNHKjY21nfbiRMnKj09\nvROn7Zra+u/4f6qrq7VkyRJt2rSpEyftutracVVVlRYvXizLsjRo0CAtW7ZMQUF8hMPdaGvP27Zt\nU35+voKDgxUbG6tXXnmls8ftcsrKyvTWW2/p3LlzCgkJ0UMPPaTExERFR0ffVff4qE8AAAzEt6EA\nABiIQAMAYCACDQCAgQg0AAAGItAAABiIQAMAYCACDQCAgQg0AAAG+j+ppSBvmqdUcAAAAABJRU5E\nrkJggg==\n","text/plain":["<Figure size 576x396 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"mpmOwHAMCbt3","colab_type":"code","colab":{}},"source":["# from google.colab import files\n","# # fucntion for to save weights to files\n","# weight_matrix = sess.run(w_2)\n","# for i in range(len(weight_matrix)):\n","#   filename = \"file%s\" % i\n","#   file = open(\"%s.txt\" % filename, \"w\")\n","#   weight = weight_matrix[i]\n","#   for j in range(len(weight)):\n","#     file.write(str(weight[j])+'\\n')\n","#   file.close()\n","#   download = files.download(\"%s.txt\" % filename)\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tNil6YjIznyp","colab_type":"code","colab":{}},"source":["# from tempfile import TemporaryFile\n","# from google.colab import files\n","# import numpy as np\n","# file = '/error-2'\n","# e2 = np.array(sess.run(error))\n","# np.savez_compressed(file,e=e2)\n","# download = files.download(file+'.npz')\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UWdnwYYh2UHM","colab_type":"code","outputId":"a606fb36-07ee-46be-aa97-e06988844adc","executionInfo":{"status":"ok","timestamp":1554310968547,"user_tz":240,"elapsed":165238,"user":{"displayName":"Andrej Kukuruzovic","photoUrl":"","userId":"02045858448246889126"}},"colab":{"base_uri":"https://localhost:8080/","height":600}},"source":["%%time\n","\n","\n","#get our data\n","mnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)\n","emnist = read_data_sets('', one_hot=True) \n","\n","features = 26\n","hidden = 40\n","a_0 = tf.placeholder(tf.float32, [None, 784])\n","y = tf.placeholder(tf.float32, [None, features])\n","\n","w_1 = tf.Variable(tf.truncated_normal([784, hidden]))\n","b_1 = tf.Variable(tf.truncated_normal([1, hidden]))\n","w_2 = tf.Variable(tf.truncated_normal([hidden, features]))\n","b_2 = tf.Variable(tf.truncated_normal([1, features]))\n","error = tf.Variable(tf.truncated_normal([hidden, features]))\n","\n","\n","def sigma(x):\n","    return tf.div(tf.constant(1.0),\n","                  tf.add(tf.constant(1.0), tf.exp(tf.negative(x))))\n","  \n","  \n","z_1 = tf.add(tf.matmul(a_0, w_1), b_1)\n","a_1 = sigma(z_1)\n","z_2 = tf.add(tf.matmul(a_1, w_2), b_2)\n","a_2 = sigma(z_2)\n","\n","\n","diff = tf.subtract(a_2, y)\n","\n","\n","def sigmaprime(x):\n","    return tf.multiply(sigma(x), tf.subtract(tf.constant(1.0), sigma(x)))\n","  \n","  \n","d_z_2 = tf.multiply(diff, sigmaprime(z_2))\n","d_b_2 = d_z_2\n","d_w_2 = tf.matmul(tf.transpose(a_1), d_z_2)\n","# final_e = d_z_2\n","\n","d_a_1 = tf.matmul(d_z_2, tf.transpose(w_2))\n","d_z_1 = tf.multiply(d_a_1, sigmaprime(z_1))\n","d_b_1 = d_z_1\n","d_w_1 = tf.matmul(tf.transpose(a_0), d_z_1)\n","\n","\n","eta = tf.constant(0.3)\n","step = [\n","    tf.assign(w_1,\n","            tf.subtract(w_1, tf.multiply(eta, d_w_1)))\n","  , tf.assign(b_1,\n","            tf.subtract(b_1, tf.multiply(eta,\n","                               tf.reduce_mean(d_b_1, axis=[0]))))\n","  , tf.assign(w_2,\n","            tf.subtract(w_2, tf.multiply(eta, d_w_2)))\n","  , tf.assign(b_2,\n","            tf.subtract(b_2, tf.multiply(eta,\n","                               tf.reduce_mean(d_b_2, axis=[0]))))\n","  #, tf.assign(error, diff)\n","]\n","\n","\n","# loss functions \n","acct_mat = tf.equal(tf.argmax(a_2, 1), tf.argmax(y, 1))\n","acct_res = tf.reduce_sum(tf.cast(acct_mat, tf.float32))\n","\n","\n","#initialize some variables\n","batch_size = 10\n","total_test_size = len(emnist.test.images)//2\n","epoch = range(100)\n","test_accuracy = []\n","train_accuracy = []\n","\n","#start session\n","sess = tf.InteractiveSession()\n","sess.run(tf.global_variables_initializer())\n","\n","### train the model\n","for _ in epoch:\n","  for i in range(total_test_size//batch_size):\n","      batch_xs, batch_ys = emnist.train.next_batch(batch_size)\n","      sess.run(step, feed_dict = {a_0: batch_xs,\n","                                  y : batch_ys})\n","  ### test the accuracy \n","  test_acc = sess.run(acct_res, feed_dict =\n","                          {a_0: emnist.test.images[:1000],\n","                           y : emnist.test.labels[:1000]})/1000\n","  train_acc = sess.run(acct_res, feed_dict =\n","                          {a_0: emnist.train.images[:1000],\n","                           y : emnist.train.labels[:1000]})/1000\n","  test_accuracy.append(test_acc)\n","  train_accuracy.append(train_acc)\n","\n","  \n","#close the session  \n","# sess.close()\n","#plot \n","plt.figure()\n","plt.title('MNIST Initial Network')\n","plt.plot(epoch,test_accuracy,color='red',label='test')\n","plt.plot(epoch,train_accuracy,color='blue', label='train')\n","plt.xlabel('epoch')\n","plt.ylabel('classification error')\n","plt.legend()\n","\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Extracting MNIST_data/train-images-idx3-ubyte.gz\n","Extracting MNIST_data/train-labels-idx1-ubyte.gz\n","Extracting MNIST_data/t10k-images-idx3-ubyte.gz\n","Extracting MNIST_data/t10k-labels-idx1-ubyte.gz\n","Extracting emnist-letters-train-images-idx3-ubyte.gz\n","Extracting emnist-letters-train-labels-idx1-ubyte.gz\n","Extracting emnist-letters-test-images-idx3-ubyte.gz\n","Extracting emnist-letters-test-labels-idx1-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py:1702: UserWarning: An interactive session is already active. This can cause out-of-memory errors in some cases. You must explicitly call `InteractiveSession.close()` to release resources held by the other session(s).\n","  warnings.warn('An interactive session is already active. This can '\n"],"name":"stderr"},{"output_type":"stream","text":["CPU times: user 3min 42s, sys: 24.4 s, total: 4min 7s\n","Wall time: 2min 44s\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 576x396 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"XpsrMZ9YF6sT","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}